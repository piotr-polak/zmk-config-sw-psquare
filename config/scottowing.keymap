#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MAC 0
#define MAC_CODE 1
#define MAC_NUMBER 2
#define MAC_FUNCTION 3
#define WINDOWS 4
#define WINDOWS_CODE 5
#define WINDOWS_NUMBER 6
#define WINDOWS_FUNCTION 7

// Home row mods macro
//#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4

#define HRML(k1,k2,k3,k4) &ht LGUI k1  &ht LALT k2  &ht LCTRL k3  &ht LSHFT k4
#define HRMR(k1,k2,k3,k4) &ht RSHFT k1  &ht RCTRL k2  &ht RALT k3  &ht RGUI k4

//#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

#define DEF 0
#define NAV 1
#define SYM 2
#define NUM 3
#define MED 4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;

            // keys: R U

            key-positions = <4 3>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        combo_minus {
            timeout-ms = <50>;

            // keys: T Y

            key-positions = <5 6>;
            bindings = <&kp MINUS>;
            layers = <0>;
        };

        combo_backspace {
            timeout-ms = <50>;

            // keys: V M

            key-positions = <31 32>;
            bindings = <&kp BSPC>;
            layers = <0>;
        };

        combo_under {
            timeout-ms = <50>;

            // keys: B N

            key-positions = <29 30>;
            bindings = <&kp UNDER>;
            layers = <0>;
        };

        combo_capsw {
            timeout-ms = <50>;

            // keys: E I

            key-positions = <7 4>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        conbo_tab {
            bindings = <&kp TAB>;
            key-positions = <27 28>;
            layers = <0>;
        };

        combo_delete {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
        };
    };

    //    conditional_layers {
    //        compatible = "zmk,conditional-layers";
    //        tri_layer {
    //            if-layers = <1 2 3>;
    //            then-layer = <3>;
    //        };
    //    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp T &kp R &kp S &kp H &kp O &kp P &kp P &kp I &kp N &kp G &kp AT &kp P &kp R &kp O &kp T &kp O &kp N &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none  &kp Q           &kp W           &kp E        &kp R             &kp T      &kp Y        &kp U              &kp I            &kp O                 &kp P                &none
&none  &kp A           &kp S           &kp D        &kp F             &kp G      &kp H        &kp J              &kp K            &kp L                 &kp SEMICOLON        &none
&none  &mt LEFT_GUI Z  &mt LEFT_ALT X  &mt LCTRL C  &mt LEFT_SHIFT V  &kp B      &kp N        &mt RIGHT_SHIFT M  &mt RCTRL COMMA  &mt RIGHT_ALT PERIOD  &mt RIGHT_GUI SLASH  &none
                                                    &lt 1 SPACE       &lt 4 TAB  &lt 2 ENTER  &lt 3 BACKSPACE
            >;
        };

        navigation {
            bindings = <
&trans  &email  &trans  &trans  &trans          &trans           &kp CARET       &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans  &trans  &trans  &trans          &trans           &kp LEFT_ARROW  &kp DOWN        &kp UP           &kp RIGHT_ARROW       &kp DOLLAR             &trans
&trans  &trans  &trans  &trans  &kp LEFT_SHIFT  &kp PRINTSCREEN  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP      &kp END               &kp INS                &trans
                                &trans          &trans           &trans          &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp HASH          &kp CARET             &kp TILDE       &trans  &trans  &trans  &trans
&trans  &kp DOLLAR       &kp PERCENT   &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH         &kp NON_US_BACKSLASH  &kp UNDERSCORE  &trans  &trans  &trans  &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES     &kp PIPE        &trans  &trans  &trans  &trans
                                                             &trans                 &trans            &trans                &trans
            >;
        };

        numbers {
            bindings = <
&trans  &kp EQUAL     &kp N7        &kp N8        &kp N9        &kp NUMBER_0  &kp UNDERSCORE  &kp F9              &kp F10  &kp F11  &kp F12  &trans
&trans  &kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS      &kp COMMA       &kp F5              &kp F6   &kp F7   &kp F8   &trans
&trans  &kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS     &kp PERIOD      &mt RIGHT_SHIFT F1  &kp F2   &kp F3   &kp F4   &trans
                                                  &trans        &trans        &trans          &trans
            >;
        };

        media {
            bindings = <
&trans  &trans      &trans        &trans        &trans        &bt BT_CLR_ALL  &kp C_MUTE         &trans            &trans      &trans       &trans  &trans
&trans  &bt BT_NXT  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans          &kp C_VOLUME_UP    &kp C_PLAY_PAUSE  &kp C_NEXT  &trans       &trans  &trans
&trans  &bt BT_PRV  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans          &kp C_VOLUME_DOWN  &kp C_STOP        &kp C_PREV  &kp C_EJECT  &trans  &trans
                                                &none         &none           &none              &none
            >;
        };
    };
};
